1. 게임 개발 시, 개발하는 컨셉에 맞는 데이터 구조 설계

  - 멀티 플레이 게임이라면, 서버나 DB 에 대한 구조를 어떻게 가져갈 것인가를 정한다.
     * firebase , 사설 서버, 구글 콘솔 클라우드, 플레이팹 등
  - 싱글 플레이 게임이라도, 기기마다 계정에 의한 데이터를 물고 있어야 한다. 따라서 적절한 저장 매체가 필요함.
     * 구글 콘솔 클라우드, 유니티 내장 PlayerPrefs
     
2. Monobehavior 를 상속받은 클래스는 init 매소드를 여러 개 생성하여, 각 event 매소드에 적절하게 배치하여야함.

public interface IComponentStyle
{
    void AwakeInit();   // Awake 에서만 초기화
    void EnableInit();  // Enable 되었을 때만 초기화
    void StartInit();   // Start 에서만 초기화
    void ReInit();      // 코드 로직 중에 초기화 필요한 경우   
}

위와 같은 인터페이스를 상속받은 구조를 구현함.

위와 같은 사례로 구현하는 이유는 게임이 리프레쉬되거나 특정 상황에서 초기화되는 요소들이 난잡하게 처리되는 경우가 있는데 이를 해결할 수 있다.

3 하나의 컴포넌트는 자기 자신을 제외한 다른 오브젝트를 소유를 지양해야한다.
   예를 들어, 'A 버튼을 눌렀을 때, B 팝업을 활성화할 때 A 가 B 오브젝트를 변수로 갖고 있는 방법' 은 지양해야함.
   이렇게 될 경우, 연관이 없는 오브젝트들 사이의 의존성이 강해져서, 굳어진 코드들이 발생하기 마련임.
   다른 오브젝트에 접근해야 한다면, A 와 B 를 연결해주는 매니저 오브젝트를 통해서 처리한다. 
   A 의 상위의 매니저 오브젝트가 있을 경우, A 에서 매니저를 호출해서 처리하거나 콜백을 받아서 처리한다.
   (매니저를 직접 호출할 때는 휘발성 코드로 진행한다.)